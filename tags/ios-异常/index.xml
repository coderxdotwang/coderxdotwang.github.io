<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>iOS 异常 on 编程蚂蚁</title><link>https://coderx.wang/tags/ios-%E5%BC%82%E5%B8%B8/</link><description>Recent content in iOS 异常 on 编程蚂蚁</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 16 Jun 2019 17:47:50 +0800</lastBuildDate><atom:link href="https://coderx.wang/tags/ios-%E5%BC%82%E5%B8%B8/index.xml" rel="self" type="application/rss+xml"/><item><title>「译」理解iOS异常类型</title><link>https://coderx.wang/posts/%E8%AF%91-%E7%90%86%E8%A7%A3ios%E5%BC%82%E5%B8%B8%E7%B1%BB%E5%9E%8B/</link><pubDate>Sun, 16 Jun 2019 17:47:50 +0800</pubDate><guid>https://coderx.wang/posts/%E8%AF%91-%E7%90%86%E8%A7%A3ios%E5%BC%82%E5%B8%B8%E7%B1%BB%E5%9E%8B/</guid><description>原文链接：Understanding iOS Exception Types (PS.由于未知原因已失效，经检查，文章中引用的链接都还有效 ：) 翻译：CoderWangx
当你的iOS应用崩溃的时候，我们需要去分析异常日志以定位根本原因。崩溃可能是 “低内存崩溃 Low Memory Crash” 或者 “普通异常崩溃”。当碰到“异常”时，更好的理解“不同类型的异常”能够真正帮助我们快速定位问题所在。
在这篇文章中，我们将研究 iOS 应用可能碰到的不同类型的“异常”，例如EXC_CRASH、EXC_BAD_ACCESS、EXC_RESOURCE、00000020 等。
[TOC]
崩溃日志中的“异常” “异常”这个词在“崩溃日志”语境下更多与“Mach 异常”（以“EXC_为前缀”）和 “UNIX 信号”（如: SIGSEGV, SIGBUS等）相关。在某些情况下（应该是有对应的dSYM符号文件时）系统会通过映射将底层的 Mach 异常 翻译为 UNIX 信号。这就是为什么你能log中看到有用 “EXC_CRASH(SIGABRT)” 及 “EXC_BAC_ACCESS(SIGSEGV)” 作为 异常类型（Exception Type）。
对于某些异常，还会附带一个关联的 处理器定制异常码（processor-specific Exception Code） 或者 异常子类型（Exception Subtype），用以包含更多问题相关信息。举例来说， “EXC_BAC_ACCESS” 类型异常可能有一行如“KERN_INVALID_ADDRESS at 0x80000010”作为“异常码”； “EXC_RESOURCE” 可能有一行&amp;quot;WAKEUPS&amp;quot;作为&amp;quot;异常子类别&amp;quot;。
UNIX 信号 iOS开发者常见的 UNIX 信号 如下：
UNIX 信号 注释 SIGSEGV 访问无效的内存地址。地址存在，但是应用程序无法访问。 SIGABRT 程序崩溃。由 C函数 abort() 初始化。通常意味着系统检测到某些事务出错，例如 assert() 或者 NSAssert() 校验失败。 SIGBUS 访问无效的内存地址。地址不存在，或对齐无效。（The address does not exist, or the alignment is invalid.</description></item></channel></rss>